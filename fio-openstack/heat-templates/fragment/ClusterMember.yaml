heat_template_version: 2017-02-24

description: Single server instance fragment

parameters:
  network:
    type: string
  network01_prefix:
    type: string
  instance_name:
    type: string
  instance_domain:
    type: string
  instance_cluster:
    type: string
  instance_zone:
    type: string
  instance_os:
    type: string
  instance_flavor:
    type: string
  instance_image:
    type: string
  instance_public_net:
    type: string
    default: public
  instance_boot_timeout:
    type: number
    default: 3600
  instance_cloud_init:
    type: string
    default: ""
  network_port_security_enabled:
    type: boolean
    description: enable/disable port security on networks
    default: false
  volume_size:
    type: number
    default: 110
  key_pair:
    type: string
    default: mcp-scale-jenkins
  affinity_group:
    type: string

resources:
  volume01:
    type: OS::Cinder::Volume
    properties:
      name:
        list_join:
        - '.'
        - [ "volume01", { get_param: instance_name }, { get_param: instance_domain } ]
      size: { get_param: volume_size }
  instance_volume01:
    type: OS::Cinder::VolumeAttachment
    depends_on: volume01
    properties:
      volume_id: { get_resource: volume01 }
      instance_uuid: { get_resource: instance_instance }
      mountpoint: /dev/vdc
  instance_port01:
    type: OS::Neutron::Port
    properties:
      network_id: { list_join: ['-', [get_param: network, 'net01']] }
      port_security_enabled: false
  instance_wait_handle:
    type: OS::Heat::WaitConditionHandle
  instance_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: instance_instance
    properties:
      handle: { get_resource: instance_wait_handle }
      timeout: { get_param: instance_boot_timeout }
  instance_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: instance_image }
      image_update_policy: REBUILD
      flavor: { get_param: instance_flavor }
      name:
        list_join:
        - '.'
        - [ { get_param: instance_name }, { get_param: instance_domain } ]
      availability_zone: { get_param: instance_zone }
      key_name: { get_param: key_pair }
      networks:
      - port: { get_resource: instance_port01 }
      scheduler_hints:
        group: { get_param: affinity_group }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -xe
            apt update -y
            apt install -y fio
            echo 'type=83' | sfdisk /dev/vdb
            mkfs.ext4 /dev/vdb1
            mkdir /vol
            mount /dev/vdb1 /vol/
            dd if=/dev/zero of=/vol/test.img bs=1M count=21000
            echo "172.16.44.38 heat.it.just.works" >> /etc/hosts
            fio --server --daemonize=/tmp/fio.pid
            wc_notify --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: { get_attr: ['instance_wait_handle', 'curl_cli'] }
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: instance_public_net }
      port_id: { get_resource: instance_port01 }
  floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id:  { get_resource: floating_ip }
      port_id: { get_resource: instance_port01 }
outputs:
  instance_address:
    value:
      get_attr:
      - instance_instance
      - addresses
      - { list_join: [ '-', [ get_param: network, 'net01'] ] }
      - 0
      - addr
    description: "Instance's private IP address"
  instance_public_address:
    value: { get_attr: [floating_ip, floating_ip_address] }
    description: "Instance's public IP address"
  instance:
    value: { get_resource: instance_instance }
    description: "Instance"
